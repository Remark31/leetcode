package main

import (
	"fmt"
	"interview/datastruct"
	"interview/leetcode"
)

func heap_sort() {
	a := []int{4, 5, 6, 2, 3, 4, 8}
	h := datastruct.InitHeap()

	for i := 0; i < len(a); i++ {
		h.Insert(a[i])
	}

	for !h.Empty() {
		fmt.Println("num: ", h.DeleteTop())
	}
}

func queue() {

	a := []int{5, 6, 2, 3, 4, 1}
	q := datastruct.InitQueue()

	for i := 0; i < len(a); i++ {
		q.Push(a[i])
		q.WalkQueue()
	}

	for !q.Empty() {
		fmt.Println(q.Pop())
	}

}

func allone() {
	key := []string{"a", "b", "c", "a", "d", "a"}
	obj := datastruct.ConstructorAllOne()
	for _, k := range key {
		obj.Inc(k)
		fmt.Println("Max: ", obj.GetMaxKey())
		fmt.Println("Min: ", obj.GetMinKey())
		obj.Walk()
	}

	for _, k := range key {
		obj.Dec(k)
		fmt.Println("Max: ", obj.GetMaxKey())
		fmt.Println("Min: ", obj.GetMinKey())
		obj.Walk()
	}

}

func minstack() {
	a := []int{3, 5, 4, 2, 7, 8, 3, 1, 1, 4}
	obj := datastruct.ConstructorMinStack()
	for i := range a {
		obj.Push(a[i])
		fmt.Println("i", i, "min: ", obj.GetMin(), "top: ", obj.Top())
	}
	for i := range a {
		fmt.Println("i: ", i, "min: ", obj.GetMin(), "top: ", obj.Top())
		obj.Pop()
	}

}

func lru() {
	obj := datastruct.Constructor(5)
	a := []int{3, 5, 4, 2, 7, 8, 3, 1, 1, 4, 8, 11, 12, 15}
	for i := range a {
		obj.Put(a[i], i)
	}

	for i := 0; i < 5; i++ {
		fmt.Println(obj.Get(i))
	}

}

func lca() {
	a := []int{3, 5, 1, 6, 2, 0, 8, -1, -1, 7, 4}
	r := leetcode.InitTreeByArray(a)

	fmt.Println(r, r.Left, r.Right, r.Left.Left, r.Right.Right)

	l := leetcode.LowestCommonAncestor(r, r.Left, r.Right)

	fmt.Println(l)
}

func shopoffers() {
	a := []int{9, 6, 1, 5, 3, 4}
	b := [][]int{{1,2,2,1,0,4,14},{6,3,4,0,0,1,16},
	{4,5,6,6,2,4,26},
	{1,1,4,3,4,3,15},
	{4,2,5,4,4,5,15},
	{4,0,0,2,3,5,13},
	{2,4,6,4,3,5,7},
	{3,3,4,2,2,6,21},
	{0,3,0,2,3,3,15},
	{0,2,4,2,2,5,24},{4,1,5,4,5,4,25},
	[6,0,5,0,1,1,14],[4,0,5,2,1,5,8],[4,1,4,4,3,1,10],[4,4,2,1,5,0,14],[2,4,4,1,3,1,16],[4,2,3,1,2,1,26],[2,4,1,6,5,3,2],[0,2,0,4,0,0,19],[3,1,6,3,3,1,23],[6,2,3,2,4,4,16],[5,3,5,5,0,4,5],[5,0,4,3,0,2,20],[5,3,1,2,2,5,8],[3,0,6,1,0,2,10],[5,6,6,1,0,4,12],[0,6,6,4,6,4,21],[0,4,6,5,0,0,22],[0,4,2,4,4,6,16],[4,2,1,0,6,5,14],[0,1,3,5,0,3,8],[5,5,3,3,2,0,4],[1,0,3,6,2,3,18],[4,2,6,2,2,5,2],[0,2,5,5,3,6,12],[1,0,6,6,5,0,10],[6,0,0,5,5,1,24],[1,4,6,5,6,3,19],[2,2,4,2,4,2,20],[5,6,1,4,0,5,3],[3,3,2,2,1,0,14],[0,1,3,6,5,0,9],[5,3,6,5,3,3,11],[5,3,3,1,0,2,26],[0,1,1,4,2,1,16],[4,2,3,2,1,4,6],[0,2,1,3,3,5,15],[5,6,4,1,2,5,18],[1,0,0,1,6,1,16],[2,0,6,6,2,2,17],[4,4,0,2,4,6,12],[0,5,2,5,4,6,6],[5,2,1,6,2,1,24],[2,0,2,2,0,1,14],[1,1,0,5,3,5,16],[0,2,3,5,5,5,6],[3,2,0,6,4,6,8],[4,0,1,4,5,1,6],[5,0,5,6,6,3,7],[2,6,0,0,2,1,25],[0,4,6,1,4,4,6],[6,3,1,4,1,1,24],[6,2,1,2,1,4,4],[0,1,2,3,0,1,3],[0,2,5,6,5,2,13],[2,6,4,2,2,3,17],[3,4,5,0,5,4,20],[6,2,3,4,1,3,4],[6,4,0,0,0,5,16],[3,1,2,5,0,6,11],[1,3,2,2,5,6,14],[1,3,4,5,3,5,18],[2,1,1,2,6,1,1],[4,0,4,0,6,6,8],[4,6,0,5,0,2,1],[3,1,0,5,3,2,26],[4,0,4,0,6,6,6],[5,0,0,0,0,4,26],[4,3,2,2,0,2,14],[5,2,4,0,2,2,26],[3,4,6,0,2,4,25],[2,1,5,5,1,3,26],[0,5,2,4,0,2,24],[5,2,5,4,5,0,1],[5,3,0,1,5,4,15],[6,1,5,1,2,1,21],[2,5,1,2,1,4,15],[1,4,4,0,0,0,1],[5,0,6,1,1,4,22],[0,1,1,6,1,4,1],[1,6,0,3,2,2,17],[3,4,3,3,1,5,17],[1,5,5,4,5,2,27],[0,6,5,5,0,0,26],[1,4,0,3,1,0,13],[1,0,3,5,2,4,5],[2,2,2,3,0,0,11],[3,2,2,1,1,1,6],[6,6,1,1,1,6,26],[1,5,1,2,5,2,12]}
	c := []int{6,6,6,1,6,6}
}

func main() {
	// heap_sort()
	// queue()
	// fmt.Println(leetcode.ReachNumber(4))
	// allone()
	// minstack()
	// lru()
	lca()
}
